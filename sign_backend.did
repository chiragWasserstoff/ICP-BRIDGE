type HttpOutcallError = variant {
  IcError : record { code : RejectionCode; message : text };
  InvalidHttpJsonRpcResponse : record {
    status : nat16;
    body : text;
    parsingError : opt text;
  };
};
type JsonRpcError = record { code : int64; message : text };
type ProviderError = variant {
  TooFewCycles : record { expected : nat; received : nat };
  MissingRequiredProvider;
  ProviderNotFound;
  NoPermission;
};
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant { Ok : float64; Err : text };
type Result_1 = variant { Ok : text; Err : text };
type Result_2 = variant { Ok; Err : text };
type Result_3 = variant { Ok : vec SignatureInfo; Err : text };
type Result_4 = variant { Ok : SendRawTransactionResult; Err : text };
type RpcError = variant {
  JsonRpcError : JsonRpcError;
  ProviderError : ProviderError;
  ValidationError : ValidationError;
  HttpOutcallError : HttpOutcallError;
};
type SendRawTransactionResult = variant {
  Ok : SendRawTransactionStatus;
  Err : RpcError;
};
type SendRawTransactionStatus = variant {
  Ok : opt text;
  NonceTooLow;
  NonceTooHigh;
  InsufficientFunds;
};
type SignatureInfo = record {
  err : opt text;
  signature : text;
  confirmationStatus : opt text;
  memo : opt text;
  slot : nat64;
  blockTime : opt int64;
};
type ValidationError = variant {
  CredentialPathNotAllowed;
  HostNotAllowed : text;
  CredentialHeaderNotAllowed;
  UrlParseError : text;
  Custom : text;
  InvalidHex : text;
};
service : {
  fetch_crypto_prices_and_calculate_ethereum : (float64) -> (Result);
  generate_key_pair : () -> (Result_1);
  generate_keypair_solana : () -> (Result_1);
  get_logs : () -> (text);
  get_program_data : (text) -> (Result_2);
  get_signatures_for_address : (text) -> (Result_3);
  process_decoding : (text) -> (Result_2);
  send_eth : (text, float64, text) -> (Result_4);
  send_swap_request : (text, text, text, nat64, opt float64) -> (Result_2);
  verify_trans : (text, text, text, text) -> (Result_4);
}
